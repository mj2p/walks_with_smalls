name: test_deploy

on:
  push:
    branches:
      - master

jobs:
  lint_test_deploy:
    name: lint then test then deploy
    runs-on: ubuntu-20.04
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: install pipenv
        uses: dschep/install-pipenv-action@v1

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv sync --dev

      - name: Run pre-commit
        run: |
          pipenv run pre-commit run -a --verbose

      - name: Create env file
        run: |
          mkdir -p .config
          echo "POSTGRES_DB=github_actions
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_HOST=db" > .config/.env.dev

      - name: run tests under coverage
        run: |
          pipenv run docker-compose -f docker-compose.yml -f docker-compose.dev.yml up db -d
          pipenv run docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm web pipenv run coverage run
          pipenv run docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm web pipenv run coverage xml
          pipenv run docker-compose -f docker-compose.yml -f docker-compose.dev.yml down db

      - name: Docker cache
        uses: satackey/action-docker-layer-caching@v0.0.8
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - name: upload coverage report to codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push prod image
        id: docker_build_prod
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: woolysammoth/walks_with_smalls:prod
          target: prod

      - name: Image digest
        run: echo ${{ steps.docker_build_prod.outputs.digest }}

      - name: copy docker-compose files via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DOCKER_HOST }}
          username: ${{ secrets.DOCKER_HOST_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "docker-compose.yml,docker-compose.prod.yml"
          target: "."

      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DOCKER_HOST }}
          username: ${{ secrets.DOCKER_HOST_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script_stop: true
          script: |
            # login to dockerhub
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            # pull the new container
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull -q web
            # reload the app
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --no-build --force-recreate web
            # migrate the database
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml run --rm web pipenv run python walks_with_smalls/manage.py migrate
            # run collectstatic
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml run --rm web pipenv run python walks_with_smalls/manage.py collectstatic --no-input
