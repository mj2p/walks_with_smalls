name: test_deploy

on:
  push:
    branches:
      - master

jobs:
  lint_test_deploy:
    name: lint then test then deploy
    runs-on: ubuntu-20.04

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgis:
        # Docker Hub image
        image: postgis/postgis
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: install pipenv
        uses: dschep/install-pipenv-action@v1

      - id: cache-pipenv
        uses: actions/cache@v1
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: |
          pipenv sync --dev

      - name: Run pre-commit
        run: |
          pipenv run pre-commit run -a --verbose

#      - name: run tests under coverage
#        run: |
#          pipenv run coverage run
#          pipenv run coverage xml
#        env:
#          POSTGRES_USER: postgres
#          POSTGRES_PASSWORD: postgres
#          POSTGRES_DB: github_actions
#          PYTHON_PATH: walks_with_smalls
#
#      - name: upload coverage report to codecov
#        uses: codecov/codecov-action@v1
#        with:
#          file: ./coverage.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: woolysammoth/walks_with_smalls:prod
          target: prod

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          # this assumes that .config/.env.prod is already on the server
          # copy compose files
          scp docker-compose.yml ${{ secrets.DOCKER_HOST }}:${{ secrets.DOCKER_HOST_PATH }}
          scp docker-compose.prod.yml ${{ secrets.DOCKER_HOST }}:${{ secrets.DOCKER_HOST_PATH }}
          # run commands to pull and restart the web container
          ssh -t ${{ secrets.DOCKER_HOST }} "docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull web"
          ssh -t ${{ secrets.DOCKER_HOST }} "docker-compose.yml -f docker-compose.prod.yml up -d --no-build --force-recreate web"

